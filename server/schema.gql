# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddFoodInput {
  foodName: String!
  foodNutrition: NutritionInput
  serving: Float!
}

input AddMealInput {
  date: String!
  food: AddFoodInput!
  name: MealName!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Day {
  _id: ID!
  breakfast: Meal
  date: String!
  dayNutrition: TotalNutrition
  dinner: Meal
  lunch: Meal
  snacks: Meal
  user: User!
}

type Food {
  _id: ID!
  foodName: String!
  foodNutrition: Nutrition!
  serving: Int!
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

type Goals {
  currentWeight: Float
  goalWeight: Float
  startingWeight: Float
}

input LoginUserInput {
  password: String!
  username: String!
}

type Meal {
  _id: ID!
  foods: [Food]!
  mealNutrition: TotalNutrition
  name: MealName!
}

enum MealName {
  BREAKFAST
  DINNER
  LUNCH
  SNACKS
}

type Mutation {
  addMeal(addMealInput: AddMealInput!): Day!
  loginUser(loginUserInput: LoginUserInput!): UserResponse!
  registerUser(registerUserInput: RegisterUserInput!): UserResponse!
  updateProfile(updateProfileInput: UpdateProfileInput!): UserResponse!
  updateUserGoals(userGoalInput: UserGoalsInput!): UserResponse!
}

type Nutrient {
  nutrientName: String!
  unitName: String!
  value: Float!
}

input NutrientInput {
  nutrientName: String!
  unitName: String!
  value: Float!
}

type Nutrition {
  calories: Nutrient
  carbs: Nutrient
  fat: Nutrient
  protein: Nutrient
}

input NutritionInput {
  calories: NutrientInput
  carbs: NutrientInput
  fat: NutrientInput
  protein: NutrientInput
}

type Query {
  day(date: String!): Day!
  hello: String!
  meals(date: String!, userId: String!): [Meal!]!
  user: User!
}

input RegisterUserInput {
  confirmPassword: String!
  dateOfBirth: String!
  email: String!
  gender: Gender!
  password: String!
  username: String!
}

type TotalNutrition {
  calorieTotal: Float!
  carbsTotal: Float!
  fatTotal: Float!
  proteinTotal: Float!
}

input UpdateProfileInput {
  about: String
  inspiration0: String
  inspiration1: String
  inspiration2: String
  why: String
}

type User {
  _id: ID!
  about: String
  avatar: String
  createdAt: DateTime!
  dateOfBirth: String!
  email: String!
  gender: Gender!
  goals: Goals
  height: Float
  inspirations: [String!]
  updatedAt: DateTime!
  username: String!
  why: String
}

input UserGoalsInput {
  currentWeight: Float
  goalWeight: Float
  startingWeight: Float
}

type UserResponse {
  token: String!
  user: User!
}
